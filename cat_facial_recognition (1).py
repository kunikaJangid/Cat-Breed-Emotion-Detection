# -*- coding: utf-8 -*-
"""Cat Facial Recognition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gL-Dmu9vCkUS1KO1w-CWCWSDSK1J-xj1
"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
from tensorflow.keras.optimizers import RMSprop
import matplotlib.pyplot as plt
import tensorflow as tf
import numpy as np
import cv2
import os

img = cv2.imread('/content/drive/MyDrive/Dataset/Training/Happy/Happy 1.jpg',0)
edges = cv2.Canny(img,100,200)
plt.subplot(121),plt.imshow(img,cmap = 'gray')
plt.title('Original Image'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(edges,cmap = 'gray')
plt.title('Edge Image'), plt.xticks([]), plt.yticks([])
plt.show()

cv2.imread("/content/drive/MyDrive/Dataset/Training/Happy/Happy 1.jpg").shape

train = ImageDataGenerator(rescale = 1/255)
validation = ImageDataGenerator(rescale = 1/255)

train_dataset = train.flow_from_directory('/content/drive/MyDrive/Dataset/Training',
target_size = (200, 200),
batch_size = 3,
class_mode = 'binary')

validation_dataset = train.flow_from_directory('/content/drive/MyDrive/Dataset/Validation',
target_size = (200, 200),
batch_size = 3,
class_mode = 'binary')

train_dataset.class_indices

model = tf.keras.models.Sequential([tf.keras.layers.Conv2D(16,(3,3), activation = 'relu', input_shape = (200, 200, 3)),
                                    tf.keras.layers.MaxPool2D(2,2),
                                    #
                                    tf.keras.layers.Conv2D(32,(3,3), activation = 'relu'),
                                    tf.keras.layers.MaxPool2D(2,2),
                                    #
                                    tf.keras.layers.Conv2D(64,(3,3), activation = 'relu'),
                                    tf.keras.layers.MaxPool2D(2,2),
                                    ##
                                    tf.keras.layers.Flatten(),
                                    ##
                                    tf.keras.layers.Dense(512,activation = 'relu'),
                                    ##
                                    tf.keras.layers.Dense(1,activation = 'sigmoid'),
                                    ])

model.compile(loss = 'binary_crossentropy',
              optimizer = RMSprop(learning_rate=0.001),
              metrics = ['accuracy'])

model_fit = model.fit(train_dataset,
                      steps_per_epoch = 3,
                      epochs = 10,
                      validation_data = validation_dataset)

dir_path = '/content/drive/MyDrive/Dataset/Testing'

for i in os.listdir(dir_path ):
  # img = image.load_img(dir_path+'//'+ i, target_size=(200,200))
  img = cv2.imread(dir_path+'//'+ i)
  edges = cv2.Canny(img,100,200)
  plt.imshow(img)
  plt.subplot(121),plt.imshow(img,cmap = 'gray')
  plt.title('Original Image'), plt.xticks([]), plt.yticks([])
  plt.subplot(122),plt.imshow(edges,cmap = 'gray')
  plt.title('Edge Image'), plt.xticks([]), plt.yticks([])
  plt.show()

  X = image.img_to_array(img)
  X = np. expand_dims(X,axis =0)
  images = np.vstack([X])
  # val = model.predict (images)
  # if val == 1:
  #   print("Sad")
  # else:
  #   print ("Happy")



# img = cv2.imread('/content/drive/MyDrive/Dataset/Training/Happy/Happy 1.jpg',0)
# edges = cv2.Canny(img,100,200)
# plt.subplot(121),plt.imshow(img,cmap = 'gray')
# plt.title('Original Image'), plt.xticks([]), plt.yticks([])
# plt.subplot(122),plt.imshow(edges,cmap = 'gray')
# plt.title('Edge Image'), plt.xticks([]), plt.yticks([])
# plt.show()

dir_path = '/content/drive/MyDrive/Dataset/Testing'

for i in os.listdir(dir_path ):
  img = image.load_img(dir_path+'//'+ i, target_size=(200,200))
  plt.imshow(img)
  plt.axis('off')
  plt. show()

  X = image.img_to_array(img)
  X = np. expand_dims(X,axis =0)
  images = np.vstack([X])
  val = model.predict (images)
  if val == 0:
    print("Sad")
  else:
    print ("Happy")

